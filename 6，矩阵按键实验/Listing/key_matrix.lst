C51 COMPILER V9.01   KEY_MATRIX                                                            09/29/2022 23:04:25 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE KEY_MATRIX
OBJECT MODULE PLACED IN ..\Obj\key_matrix.obj
COMPILER INVOKED BY: D:\programming learning software\MCU\keilC51\C51\BIN\C51.EXE ..\App\bsp_key_matrix\key_matrix.c BRO
                    -WSE INCDIR(..\App\bsp_key_matrix;..\Public;..\App\bsp_smg) DEBUG OBJECTEXTEND PRINT(..\Listing\key_matrix.lst) OBJECT(..
                    -\Obj\key_matrix.obj)

line level    source

   1          #include  "key_matrix.h"
   2          
   3          
   4          /*
   5                  函数名：Key_Matrix_Ranks_Scan
   6                  功能：  使用行列式扫描方法，检测矩阵按键是否按下，并返回对应键值
   7          */
   8          uint_8 Key_Matrix_Ranks_Scan(void)
   9          {
  10   1              uint_8 key_value=0;
  11   1      
  12   1              KEY_MATRIX_PORT = 0xf7; //第一列赋0
  13   1              if(KEY_MATRIX_PORT != 0xf7)
  14   1              {
  15   2                      Delay_ms(10);   //消抖
  16   2                      switch(KEY_MATRIX_PORT)//保存第一列按键按下后的键值     
  17   2                      {
  18   3                              case 0x77: key_value=1; break;
  19   3                              case 0xb7: key_value=5; break;
  20   3                              case 0xd7: key_value=9; break;
  21   3                              case 0xe7: key_value=13; break;
  22   3                      }
  23   2              }
  24   1              while(KEY_MATRIX_PORT != 0xf7);//等待按键松开   
  25   1              
  26   1              KEY_MATRIX_PORT=0xfb;   //第二列赋0
  27   1              if(KEY_MATRIX_PORT!=0xfb)//判断第二列按键是否按下
  28   1              {
  29   2                      Delay_ms(10);   //消抖
  30   2                      switch(KEY_MATRIX_PORT)//保存第二列按键按下后的键值     
  31   2                      {
  32   3                              case 0x7b: key_value=2;break;
  33   3                              case 0xbb: key_value=6;break;
  34   3                              case 0xdb: key_value=10;break;
  35   3                              case 0xeb: key_value=14;break;
  36   3                      }
  37   2              }
  38   1              while(KEY_MATRIX_PORT != 0xfb);//等待按键松开   
  39   1              
  40   1              KEY_MATRIX_PORT=0xfd;   //第三列赋0
  41   1              if(KEY_MATRIX_PORT!=0xfd)//判断第三列按键是否按下
  42   1              {
  43   2                      Delay_ms(10);   //消抖
  44   2                      switch(KEY_MATRIX_PORT)//保存第三列按键按下后的键值     
  45   2                      {
  46   3                              case 0x7d: key_value=3;break;
  47   3                              case 0xbd: key_value=7;break;
  48   3                              case 0xdd: key_value=11;break;
  49   3                              case 0xed: key_value=15;break;
  50   3                      }
  51   2              }
  52   1              while(KEY_MATRIX_PORT != 0xfd);//等待按键松开   
  53   1              
C51 COMPILER V9.01   KEY_MATRIX                                                            09/29/2022 23:04:25 PAGE 2   

  54   1              KEY_MATRIX_PORT=0xfe;   //第四列赋0
  55   1              if(KEY_MATRIX_PORT!=0xfe)//判断第四列按键是否按下
  56   1              {
  57   2                      Delay_ms(10);   //消抖
  58   2                      switch(KEY_MATRIX_PORT)//保存第四列按键按下后的键值     
  59   2                      {
  60   3                              case 0x7e: key_value=4;break;
  61   3                              case 0xbe: key_value=8;break;
  62   3                              case 0xde: key_value=12;break;
  63   3                              case 0xee: key_value=16;break;
  64   3                      }
  65   2              }
  66   1              while(KEY_MATRIX_PORT != 0xfe);//等待按键松开
  67   1              
  68   1              return key_value;
  69   1      }
  70          
  71          
  72          /*
  73                  函数名： Key_Matrix_Flip_Scan
  74                  功能：   使用线翻转法，检测矩阵按键是否按下，并返回对应键值
  75          */
  76          uint_8 Key_Matrix_Flip_Scan(void)
  77          {
  78   1              static uint_8 key_value = 0;
  79   1      
  80   1              KEY_MATRIX_PORT = 0x0f;         //给所有行赋
  81   1              if(KEY_MATRIX_PORT != 0x0f)//判断按键是否按下
  82   1              {
  83   2                      Delay_ms(10);   //消抖
  84   2                      if(KEY_MATRIX_PORT != 0x0f)
  85   2                      {
  86   3                              //测试列
  87   3                              KEY_MATRIX_PORT = 0x0f;
  88   3                              switch(KEY_MATRIX_PORT)//保存行为0，按键按下后的列值    
  89   3                              {
  90   4                                      case 0x07: key_value=1; break;
  91   4                                      case 0x0b: key_value=2; break;
  92   4                                      case 0x0d: key_value=3; break;
  93   4                                      case 0x0e: key_value=4; break;
  94   4                              }
  95   3                              //测试行
  96   3                              KEY_MATRIX_PORT = 0xf0;
  97   3                              switch(KEY_MATRIX_PORT)//保存列为0，按键按下后的键值    
  98   3                              {
  99   4                                      case 0x70: key_value=key_value; break;
 100   4                                      case 0xb0: key_value=key_value+4; break;
 101   4                                      case 0xd0: key_value=key_value+8; break;
 102   4                                      case 0xe0: key_value=key_value+12; break;
 103   4                              }
 104   3                              while(KEY_MATRIX_PORT != 0xf0);//等待按键松开   
 105   3                      }
 106   2              }
 107   1              else
 108   1                      key_value = 0;          
 109   1              
 110   1              return key_value;
 111   1      }
 112          
 113          
 114          
 115          
C51 COMPILER V9.01   KEY_MATRIX                                                            09/29/2022 23:04:25 PAGE 3   

 116          
 117          
 118          
 119          
 120          
 121          
 122          
 123          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    354    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
